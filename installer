#!/bin/env python

# Imports
import subprocess
import re
import os
import sys
import argparse
from colorama import Fore, Style

# Constants
# It's static so if an installation-breaking change occurs, it doesn't affect anything


class constants:
    # It's static so if an installation-breaking change occurs, it doesn't affect anything
    downloadURL = 'https://mirror.bytemark.co.uk/gentoo/releases/amd64/autobuilds/20230326T170209Z/stage3-amd64-openrc-20230326T170209Z.tar.xz'
    sha256URL = 'https://mirror.bytemark.co.uk/gentoo/releases/amd64/autobuilds/20230326T170209Z/stage3-amd64-openrc-20230326T170209Z.tar.xz.sha256'
    ExpOSversion = '1.0'
    gentooVersion = '17.1'
    tarballReleaseVersion = '2023-03-26'
    mountpoint = '/mng/gentoo'


# Global variables
args = sys.argv
parser = argparse.ArgumentParser(description='Installer for ExpOS: Gentoo, simplified',
                                 epilog='Copyright Tetra Green 2023, Licenced under GPLv3')

parser.add_argument('--boot-drive', '-bd', required=1, type=str, nargs=1, dest='boot',
                    help='[/dev/sd*] Block device used for GRUB2 installation and storing kernels, overwrites target with EXT4; recommended to be 256mb or larger')
parser.add_argument('--root-drive', '-rd', required=1, type=str, nargs=1, dest='root',
                    help='[/dev/sd*] Block device used as root partition, overwrites target with EXT4; minimim size required varies on profile, 10gb or larger for desktop')
parser.add_argument('--home-fs', '-f', required=0, type=str, nargs=1, dest='home',
                    help='[/dev/sd*] Block device containing previously created filesystem to act as a home filesystem; does not overwrite')
parser.add_argument('--make', '-m', required=0, type=str, nargs=1, dest='makeLoc',
                    help='[/path/make.conf] Path to custom make.conf; default can be viewed at https://expos.us.to/distfiles/configs/portage/make.conf')
parser.add_argument('--profile', '-p', required=0, type=str, nargs=1, default='default/linux/amd64/17.1/desktop',
                    dest='profile', help='[name/of/profile] What profile to use; systemd is not supported')
parser.add_argument('--use', '-u', required=0, type=str, nargs=1, dest='use',
                    help='[flag1,flag2,flag3] What use flags are included in the make.conf; defaults include LTO, PGO, and Graphite')
parser.add_argument('--ntp', '-n', required=0, type=str, nargs=1, default='y',
                    dest='ntp', help='[Y/n] Whether or not NTP should be installed and run')
parser.add_argument('--timezone', '-t', required=0, type=str, nargs=1, default='Europe/London',
                    dest='timezone', help='[Continent/City] What timezone to use for the installed system')
parser.add_argument('--locale', '-l', required=0, type=str, nargs=1, default='en_US.UTF-8 UTF-8',
                    dest='locale', help='["en_US.UTF-8 UTF-8] What locale to use for the installed system')
parser.add_argument('--hostname', '-s', required=0, type=str, nargs=1, default='expos',
                    dest='hostname', help='[localhost] Hostname of the installed system')
parser.add_argument('--network-tools', '-nt', required=0, type=str, nargs=1, default='dhcpcd',
                    dest='networking', help='[dhcpcd] Networking toles to be installed on the system')
parser.add_argument('--jobs', '-j', required=1, type=int, nargs=1, dest='jobs',
                    help='[4] How many compile jobs to run in parallel; 2G of ram per job is recommended')
parser.add_argument('--no-optimization', '-no', dest='noOp',
                    help='[Y,n] Disables LTo, PGO, and Graphite; greatly decreases compile time at the cost of performance')
parser.add_argument('--pretend', '-pr', required=0, type=bool, dest='pretend',
                    help='Will not actually install a system, but will perform all of the checks (other than root) and will output')
parser.add_argument('--keep-going', '-k', required=0, type=bool,
                    dest='keepGoing', help='Ignores any and all errors and just keeps going')
parser.add_argument('--verbose', '-v', type=bool, dest='verbose',
                    help='Enables verbose debugging on all commands run')

args = parser.parse_args()


def error(errorCode: str):
    print(f'!! {Style.BRIGHT}{Fore.RED}{errorCode}{Style.RESET_ALL} !!')
    if (not args.keepGoing):
        exit(1)


def currentStage(stage: str):
    print(f'[{Fore.GREEN}*{Style.RESET_ALL}] {Style.BRIGHT}{Fore.GREEN}{stage}{Style.RESET_ALL}')


def info(info: str):
    print(f'=> {Fore.BLUE}{info}{Style.RESET_ALL}')


def warning(warn: str):
    print(f'^^ {Style.BRIGHT}{Fore.ORANGE}{warn}{Style.RESET_ALL} ^^')


def command(infoMessage: str, command: list, errorMessage: str):
    info(infoMessage)
    try:
        subprocess.run(command)
    except subprocess.CalledProcessError as e:
        error(errorMessage)


def main():
    # Root sanity checking
    if (not args.pretend):
        if re.match(r'root', str(subprocess.check_output('whoami'))) == None:
            error('Not running as root')

    # Path sanity checking
    if not os.path.lexists(args.boot[0]):
        error(f'The following device does not exist: {args.boot[0]}')

    # TODO:
    # More sanity checking

    currentStage('Creating filesystems')

    command('Creating filesystem on boot device',
            ['mkfs.fat', '-F', '32', args.boot[0]],
            'Creation of boot filesystem failed, see error')

    command('Creating filesystem on root device',
            ['mkfs.ext4', args.root[0]],
            'Creation of root filesystem failed, see error')

    if not os.path.lexists(constants.mountpoint):
        info('Creating mount directory')
        try:
            os.mkdir(constants.mountpoint)
        except Exception as e:
            error(f'Failed creating mountpoint: {constants.mountpoint}')

    info('Mounting boot partition')
    try:
        mountOutput = subprocess.check_output(
            ['mount', '-t', 'ext4', args.root[0], constants.mountpoint])
        if re.match(r'superuser', mountOutput):
            raise CalledProcessError()
    except subprocess.CalledProcessError:
        error('Failed mounting root partition')

    os.chdir(constants.mountpoint)

    currentStage('Installing stage tarball')
    if not os.path.lexists(f'{constants.mountpoint}/stage3-amd64-openrc-{constants.tarballReleaseVersion}.tar.xz'):
        # command('Downloading stage tarball',
        #       ['curl', downloadURL, '-o',
        #           f'stage3-amd64-openrc-{tarballReleaseVersion}.tar.xz.tmp', '-#', ('--verbose' if args.verbose else '')],
        #      'Failed downloading stage tarball')
        command('Renaming stage tarball',
                ['mv', f'stage3-amd64-openrc-{constants.tarballReleaseVersion}.tar.xz.tmp',
                    f'stage3-amd64-openrc-{constants.tarballReleaseVersion}.tar.xz', ('--verbose' if args.verbose else '')],
                'Failed downloading stage tarball')
    else:
        info('Skipping tarball download; file already exists')

    if not os.path.lexists(f'{constants.mountpoint}/checksum-{constants.tarballReleaseVersion}.sha256'):
        command('Downloading Sha256 checksum',
                ['curl', sha256URL, '-o',
                    f'checksum-{constants.tarballReleaseVersion}.sha256.tmp', '-#', ('--verbose' if args.verbose else '')],
                'Failed downloading Sha256 checksum')
        command('Renaming checksum',
                ['mv', f'checksum-{constants.tarballReleaseVersion}.sha256.tmp',
                    f'checksum-{constants.tarballReleaseVersion}.sha256', ('--verbose' if args.verbose else '')],
                'Failed renaming sha256 checksum')
        command('Editing checksum to match stage tarball',
                ['sed', '-i',
                    f's/stage3-openrc-.*\.tar\.xz/stage3-amd64-openrc-{constants.tarballReleaseVersion}\.tar\.xz/g', f'checksum-{constants.tarballReleaseVersion}.sha256'],
                'Failed sed operation')
    else:
        info('Skipping checksum download; file already exists')

    command('Verifying the integraty of Stage3 tarball',
            ['sha256sum', '-c',
                f'checksum-{constants.tarballReleaseVersion}.sha256'],
            'Failed to verify the integrety of stage3 tarball')

    command('Unpacking stage tarball',
            ['tar', 'xpf', f'stage3-amd64-openrc-{constants.tarballReleaseVersion}.tar.xz',
                '--xattrs-include="*"', '--numeric-owner', ('--verbose' if args.verbose else '')],
            'Failed to unpack the stage tarball')

    # TODO: Download make.conf, as well as set up Crimson to host shit

    command('Setting -j',
            f'echo MAKEOPTS="-j{args.jobs}" >> {constants.mountpount}/make.conf',
            'Failed writing to make.conf')

    command('Selecting mirrors',
            f'mirrorselect -D -a -o >> {constants.mountpoint}/etc/portage/make.conf',
            'Failed mirror selection')

    command('Copying DNS info',
            ['cp', '--dereference', '/etc/resolv.conf',
                f'{constants.mountpoint}/etc/resolv.conf'],
            'Failed to copy DNS info')
    # command('')


try:
    main()
except KeyboardInterrupt:
    error('Installation cancelled via Ctrl+C')
